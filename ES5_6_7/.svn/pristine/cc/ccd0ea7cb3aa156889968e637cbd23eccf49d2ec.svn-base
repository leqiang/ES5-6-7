<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>11_Promise对象</title>
</head>
<body>
<!--
1. 理解:
  * Promise对象: 代表了未来某个将要发生的事件(通常是一个异步操作)
  * 有了promise对象, 可以将异步操作以同步的流程表达出来, 避免了层层嵌套的回调函数(俗称'回调地狱')
  * ES6的Promise是一个构造函数, 用来生成promise实例
2. 使用promise基本步骤(2步):
  * 创建promise对象
    let promise = new Promise((resolve, reject) => {
      //执行异步操作
      if(异步操作成功) {
        resolve(value);
      } else {
        reject(errMsg);
      }
    })
  * 调用promise的then()
    promise.then(
      result => console.log(result),  //resolve()执行导致它调用
      errorMsg => alert(errorMsg)   //reject()执行导致它调用
    )
3. promise对象的3个状态
  * pending: 初始化状态
  * fullfilled: 成功状态
  * rejected: 失败状态
4. 应用:
  * 使用promise实现超时处理
  * 使用promise封装处理ajax请求
    let request = new XMLHttpRequest();
    request.onreadystatechange = function () {
    }
    request.responseType = 'json';
    request.open("GET", url);
    request.send();
-->

<script type="text/javascript">
  function showDelay(time) {
    //1. 创建promise对象
    const promise = new Promise((resolve) => { //创建promise就会立即启动异步任务
      console.log('创建promise之中')
      //启动定时器
      setTimeout(() => {
        //成功了
        resolve()
      }, time)
    })
    return promise
  }
  console.log('new promise之后')

  showDelay(2000)
      .then(() => { //2. 调用promise的then方法
        console.log('到点了!')
      })
  console.log('执行then之后')

</script>

</body>

</html>