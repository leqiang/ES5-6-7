<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>11_Promise对象</title>
</head>
<body>
<!--
1. 理解:
  * Promise对象: 代表了未来某个将要发生的事件(通常是一个异步操作)
  * 有了promise对象, 可以将异步操作以同步的流程表达出来, 避免了层层嵌套的回调函数(俗称'回调地狱')
  * ES6的Promise是一个构造函数, 用来生成promise实例
2. 使用promise基本步骤(2步):
  * 创建promise对象
    let promise = new Promise((resolve, reject) => {
      //执行异步操作
      if(异步操作成功) {
        resolve(value);
      } else {
        reject(errMsg);
      }
    })
  * 调用promise的then()
    promise.then(
      result => console.log(result),  //resolve()执行导致它调用
      errorMsg => alert(errorMsg)   //reject()执行导致它调用
    )
3. promise对象的3个状态
  * pending: 初始化状态
  * fullfilled: 成功状态
  * rejected: 失败状态
4. 应用:
  * 使用promise实现超时处理
  * 使用promise封装处理ajax请求
    let request = new XMLHttpRequest();
    request.onreadystatechange = function () {
    }
    request.responseType = 'json';
    request.open("GET", url);
    request.send();
-->

<script type="text/javascript">
  function ajaxReq(url) {
    return new Promise((resolve, reject) => {
      //发送ajax请求
      let request = new XMLHttpRequest()
      request.onreadystatechange = function () {
        if(request.readyState===4) {
          if(request.status===200) { //成功了
            resolve(request.response) //将状态pending-->fullfilled
          } else { // 失败了
            reject('请求失败 '+url)  //将状态pending-->rejected
          }
        }
      }
      request.responseType = 'json' //声明返回数据类型为json(自动解析为js对象/数组)
      request.open("GET", url)
      request.send()
    })
  }

  //发请求, 得到新闻详情
  ajaxReq('http://localhost:3000/news?id=4')
      .then( // 返回当前promise
          news => {
            console.log(news)
            document.write(JSON.stringify(news))
            return ajaxReq(`http://localhost:3001${news.commentsUrl}`)
          },
          (errorMsg) => {
            alert(errorMsg)
          }
      )
      .then(
          (comments) => {
            console.log(comments)
            document.write(JSON.stringify(comments))
          },
          (errorMsg) => {
            alert(errorMsg)
          }
      )
</script>

</body>

</html>